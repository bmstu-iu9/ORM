//Синтаксическое описание
S                    ::= (CREATE CreateTableFunction)*

CreateTableFunction  ::= (CreateTableStmt ';')
                     |   (CreateFunctionStmt ';')

CreateTableStmt      ::= TABLE (IF NOT EXISTS)?
                         QualifiedName '(' (TableElement (',' TableElement)*)? ')'

QualifiedName        ::= IDENT('.'IDENT)*

TableElement         ::= ColumnDef | TableConstraint

ColumnDef            ::= IDENT Typename ColConstraint*

Typename             ::= SimpleTypename ArrayType?

ArrayType            ::= ( '[' intConst? ']' )+    //intConst ни на что не влияет
                     |   ARRAY ('[' intConst ']')?

SimpleTypename       ::= NumericType
                     |   CharacterType
                     |   DateTimeType
                     |   RECORD
                     |   BOOLEAN

NumericType          ::= INT
                     |   INTEGER
                     |   SMALLINT
                     |   BIGINT
                     |   REAL
                     |   FLOAT  ( '('intConst')' )? //1 <= intConst <= 53
                     |   DOUBLE PRECISION
                     |   DECIMAL
                     |   NUMERIC

CharacterType        ::= CharacterKeyword ( '(' intConst ')' )?

CharacterKeyword     ::= CHARACTER
                     |   CHAR
                     |   VARCHAR

DateTimeType         ::= TIMESTAMP ( '(' intConst ')' )? //0 <= intConst < 6
                     |   TIME ( '(' intConst ')' )?      //0 <= intConst < 6
                     |   DATE

TableConstraint      ::= CONSTRAINT IDENT ConstraintElem
                     |   ConstraintElem

ConstraintElem       ::= UNIQUE      '(' IDENT (',' IDENT)* ')'
                     |   PRIMARY KEY '(' IDENT (',' IDENT)* ')'
                     |   FOREIGN KEY '(' IDENT (',' IDENT)* ')' REFERENCES QualifiedName
                         ('(' IDENT (',' IDENT)* ')' )? KeyActions? //VALIDATE

ColConstraint        ::= CONSTRAINT IDENT ColConstraintElem
                     |   ColConstraintElem

ColConstraintElem    ::= NOT NULL
                     |   NULL
                     |   UNIQUE
                     |   PRIMARY KEY
                     |   CHECK '(' BoolExpr ')'    //HERE NEED TO CHECK APPLICATION OF OPs
                     |   DEFAULT ConstExpr         //ARITHMETIC, BOOL ONLY EXPR OR VALUE TILL
                     |   REFERENCES QualifiedName ( '(' IDENT ')' )? KeyActions? //VALIDATE

KeyActions           ::= ON UPDATE KeyAction (ON DELETE KeyAction)?
                     |   ON DELETE KeyAction (ON UPDATE KeyAction)?

KeyAction            ::= NO ACTION
                     |   RESTRICT
                     |   CASCADE
                     |   SET NULL
                     |   SET DEFAULT
                     
ArithmExpr           ::= ArithmExprTerm ( {'+' | '-'} ArithmExprTerm )*
ArithmExprTerm       ::= ArithmExprFactor ( {'*' | '/'} ArithmExprFactor )*
ArithmExprFactor     ::= IDENT //MUST BE NUMERIC
                     |   NumericValue
                     |   '-' ArithmExprFactor
                     
BoolExpr             ::= BoolExprTerm (OR BoolExprTerm)*
BoolExprTerm         ::= BoolExprFactor (AND BoolExprFactor)*
BoolExprFactor       ::= BoolConst BoolRHS? 
                     |   NOT BoolExprFactor BoolRHS? 
                     |   '(' BoolExpr ')' BoolRHS?
                     |   IDENT RHS?                 //NOT NUMERIC TYPE
                     |   ArithmExpr ArithmRHS

BoolConst            ::= TRUE | FALSE | NULL

RHS                 ::= BoolRHS | DateRHS | StringRHS

ArithmRHS           ::= '<'  ArithmExpr
                    |   '<=' ArithmExpr
                    |   '>'  ArithmExpr
                    |   '>=' ArithmExpr
                    |   '='  ArithmExpr
                    |   '!=' ArithmExpr
                    |   NOT? BETWEEN ArithmExpr AND ArithmExpr         // ARITHMETIC ONLY

BoolRHS             ::= IS NOT? BoolConst

DateRHS             ::= '<'  DateTimeCast
                    |   '<=' DateTimeCast
                    |   '>'  DateTimeCast
                    |   '>=' DateTimeCast
                    |   '='  DateTimeCast
                    |   '!=' DateTimeCast
                    |   NOT? BETWEEN DateTimeCast AND DateTimeCast

StringRHS           ::= LIKE CharacterValue

ConstExpr           ::= ArithmConstExpr | NOT? BoolConst | CharacterValue | DateTimeCast

DateTimeCast        ::= DateValue'::'DATE
                    |   TimeValue'::'TIME
                    |   TimestampValue'::'TIMESTAMP

ArithmConstExpr      ::= ArithmConstExprTerm ( {'+' | '-'} ArithmConstExprTerm )*
ArithmConstExprTerm  ::= ArithmConstExprFactor ( {'*' | '/'} ArithmConstExprFactor )*
ArithmConstExprFactor::= NumericValue
                     |   '-' ArithmConstExprFactor
                     |   '(' ArithmConstExpr ')'

CreateFunctionStmt          ::= (OR REPLACE)? FUNCTION QualifiedName '(' funcArgsWithDefaultsList? ')' RETURNS
                                CreateFunctionReturnStmt CreateFuncBody

CreateFunctionReturnStmt    ::= Typename
                            |   TABLE '(' TableFuncColumnList ')'
                            |   VOID

TableFuncColumnList         ::= IDENT Typename (',' IDENT Typename)*

funcArgsWithDefaultsList    ::= funcArgWithDefault (',' funcArgWithDefault)*

funcArgWithDefault          ::= funcArg funcArgDefault?

funcArgDefault              ::= DEFAULT constExpr
                            |   '=' constExpr

funcArg                     ::= argClass IDENT? Typename
                            |   IDENT argClass? Typename
                            |   Typename

argClass                    ::= IN OUT?
                            |   OUT
                            |   INOUT

CreateFuncBody              ::= AS '$$' /*skip*/ '$$' LANGUAGE plpgsql
                            |   LANGUAGE plpgsql AS '$$' /*skip*/ '$$'