//Синтаксическое описание
S                    ::= (CREATE CreateTableFunctionTrigger)*

CreateTableFunctionTrigger ::= (CreateTableStmt ';')
                           |   (CreateFunctionStmt ';')
                           |   (CreateTriggerStmt ';')

CreateTableStmt      ::= TABLE (IF NOT EXISTS)?
                         QualifiedName '(' (TableElement (',' TableElement)*)? ')' Inherit?

QualifiedName        ::= ColId ('.'ColId)*

ColId                ::= IDENT //UNSUPPORTED TILL | UnreservedKeyword | ColNameKeyword

Inherit              ::= INHERITS '(' QualifiedName (',' QualifiedName)* ')'

TableElement         ::= ColumnDef | TableConstraint

ColumnDef            ::= ColId Typename ColConstraint*

Typename             ::= SimpleTypename ArrayType?

ArrayType            ::= ( '[' intConst? ']' )+    //intConst ни на что не влияет
                     |   ARRAY ('[' intConst ']')?

SimpleTypename       ::= NumericType
                     |   CharacterType
                     |   DateTimeType
                     |   RECORD

NumericType          ::= INT
                     |   INTEGER
                     |   SMALLINT
                     |   BIGINT
                     |   REAL
                     |   FLOAT  ( '('intConst')' )? //1 <= intConst <= 53
                     |   DOUBLE PRECISION
                     |   DECIMAL
                     |   NUMERIC
                     |   BOOLEAN

CharacterType        ::= CharacterKeyword ( '(' intConst ')' )?

CharacterKeyword     ::= CHARACTER
                     |   CHAR
                     |   VARCHAR

DateTimeType         ::= TIMESTAMP ( '(' intConst ')' )? //0 <= intConst < 6
                     |   TIME ( '(' intConst ')' )?      //0 <= intConst < 6
                     |   DATE

TableConstraint      ::= CONSTRAINT ColId ConstraintElem
                     |   ConstraintElem

ConstraintElem       ::= UNIQUE      '(' ColId (',' ColId)* ')'
                     |   PRIMARY KEY '(' ColId (',' ColId)* ')'
                     |   FOREIGN KEY '(' ColId (',' ColId)* ')' REFERENCES QualifiedName
                         ('(' ColId (',' ColId)* ')' )? KeyActions?

ColConstraint        ::= CONSTRAINT ColId ColConstraintElem
                     |   ColConstraintElem

ColConstraintElem    ::= NOT NULL
                     |   NULL
                     |   UNIQUE
                     |   PRIMARY KEY
                     |   CHECK '(' BoolExpr ')'    //HERE NEED TO CHECK APPLICATION OF OPs
                     |   DEFAULT ConstExpr         //ARITHMETIC, BOOL ONLY EXPR OR VALUE TILL
                     |   REFERENCES QualifiedName ( '(' ColId (',' ColId)* ')' )? KeyActions?

KeyActions           ::= ON UPDATE KeyAction (ON DELETE KeyAction)?
                     |   ON DELETE KeyAction (ON UPDATE KeyAction)?

KeyAction            ::= NO ACTION
                     |   RESTRICT
                     |   CASCADE
                     |   SET NULL
                     |   SET DEFAULT

Expr                 ::= ColExpr | CharacterValue | DateValue

ColExpr              ::= ColExprTerm ({'+' | '-' | OR} ColExprTerm)*
ColExprTerm          ::= ColExprFactor ({'*' | '/' | AND} ColExprFactor)*
ColExprFactor        ::= ColId             RHS?
                     |   '-' ColExprFactor ArithmRHS?
                     |   '(' ColExpr ')'   RHS?
                     |   NOT ColExprFactor BoolRHS?
                     |   NumericValue      ArithmRHS?
                     |   BoolConst         BoolRHS?
                     
ArithmExpr           ::= ArithmExprTerm ( {'+' | '-'} ArithmExprTerm )*
ArithmExprTerm       ::= ArithmExprFactor ( {'*' | '/'} ArithmExprFactor )*
ArithmExprFactor     ::= ColId //MUST BE NUMERIC TYPE
                     |   NumericValue
                     |   '-' ArithmExprFactor
                     |   '(' ArithmExpr ')'
                     
BoolExpr             ::= BoolExprTerm (OR BoolExprTerm)*
BoolExprTerm         ::= BoolExprFactor (AND BoolExprFactor)*
BoolExprFactor       ::= BoolConst BoolRHS? 
                     |   NOT BoolExprFactor BoolRHS? 
                     |   '(' BoolExpr ')' BoolRHS?
                     |   ArithmExpr ArithmRHS?

BoolConst            ::= TRUE | FALSE | NULL

//BoolStmt             ::= Expr RHS
                   //|   ColId LIKE StringValue                           // ONLY FOR STRING TYPE OF ColId
                   //|   ColId NOT LIKE StringValue                       // ONLY FOR STRING TYPE OF ColId
                   //|   StringValue LIKE ColId                           // ONLY FOR STRING TYPE OF ColId
                   //|   StringValue NOT LIKE ColId                       // ONLY FOR STRING TYPE OF ColId

RHS                 ::= ArithmRHS | BoolRHS

ArithmRHS           ::= '<'  ArithmExpr
                    |   '<=' ArithmExpr
                    |   '>'  ArithmExpr
                    |   '>=' ArithmExpr
                    |   '='  ArithmExpr
                    |   '!=' ArithmExpr
                    |   BETWEEN ArithmExpr AND ArithmExpr     // ARITHMETIC ONLY TILL
                    |   NOT BETWEEN ArithmExpr AND ArithmExpr // ARITHMETIC ONLY TILL

BoolRHS             ::= IS BoolConst                     

//TODO maybe make simple NumberValue instead of ArithmConstExpr
ConstExpr           ::= ArithmConstExpr | NOT? BoolConst | CharacterValue | DateValue | '(' ConstExpr ')'

ArithmConstExpr      ::= ArithmExprNoVarTerm ( {'+' | '-'} ArithmExprNoVarTerm )*
ArithmConstExprTerm  ::= ArithmExprNoVarFactor ( {'*' | '/'} ArithmExprNoVarFactor )*
ArithmConstExprFactor::= NumericValue
                     |   '-' ArithmExprNoVarFactor
                      
BoolConstExpr       ::= BoolConstExprTerm (OR BoolConstExprTerm)*
BoolConstExprTerm   ::= BoolConstExprFactor (AND BoolConstExprFactor)*
BoolConstExprFactor ::= BoolConst BoolRHS? 
                    | NOT BoolConstExprFactor BoolRHS?
                    | ArithmConstExpr ArithmRHS
                                      
ArithmRHS           ::= '<'  ArithmConstExpr
                    |   '<=' ArithmConstExpr
                    |   '>'  ArithmConstExpr
                    |   '>=' ArithmConstExpr
                    |   '='  ArithmConstExpr
                    |   '!=' ArithmConstExpr
                    |   BETWEEN ArithmConstExpr AND ArithmConstExpr     // ARITHMETIC ONLY TILL
                    |   NOT BETWEEN ArithmConstExpr AND ArithmConstExpr // ARITHMETIC ONLY TILL

ColNameKeyword::=
			  BETWEEN
			| BIGINT
			| BIT
			| BOOLEAN_P
			| CHAR_P
			| CHARACTER
			| COALESCE
			| DEC
			| DECIMAL_P
			| EXISTS
			| EXTRACT
			| FLOAT_P
			| GREATEST
			| GROUPING
			| INOUT
			| INT_P
			| INTEGER
			| INTERVAL
			| LEAST
			| NATIONAL
			| NCHAR
			| NONE
			| NULLIF
			| NUMERIC
			| OUT_P
			| OVERLAY
			| POSITION
			| PRECISION
			| REAL
			| ROW
			| SETOF
			| SMALLINT
			| SUBSTRING
			| TIME
			| TIMESTAMP
			| TREAT
			| TRIM
			| VALUES
			| VARCHAR
			| XMLATTRIBUTES
			| XMLCONCAT
			| XMLELEMENT
			| XMLEXISTS
			| XMLFOREST
			| XMLNAMESPACES
			| XMLPARSE
			| XMLPI
			| XMLROOT
			| XMLSERIALIZE
			| XMLTABLE

UnreservedKeyword::=
			  ABORT_P
			| ABSOLUTE_P
			| ACCESS
			| ACTION
			| ADD_P
			| ADMIN
			| AFTER
			| AGGREGATE
			| ALSO
			| ALTER
			| ALWAYS
			| ASSERTION
			| ASSIGNMENT
			| AT
			| ATTACH
			| ATTRIBUTE
			| BACKWARD
			| BEFORE
			| BEGIN_P
			| BY
			| CACHE
			| CALL
			| CALLED
			| CASCADE
			| CASCADED
			| CATALOG_P
			| CHAIN
			| CHARACTERISTICS
			| CHECKPOINT
			| CLASS
			| CLOSE
			| CLUSTER
			| COLUMNS
			| COMMENT
			| COMMENTS
			| COMMIT
			| COMMITTED
			| CONFIGURATION
			| CONFLICT
			| CONNECTION
			| CONSTRAINTS
			| CONTENT_P
			| CONTINUE_P
			| CONVERSION_P
			| COPY
			| COST
			| CSV
			| CUBE
			| CURRENT_P
			| CURSOR
			| CYCLE
			| DATA_P
			| DATABASE
			| DAY_P
			| DEALLOCATE
			| DECLARE
			| DEFAULTS
			| DEFERRED
			| DEFINER
			| DELETE_P
			| DELIMITER
			| DELIMITERS
			| DEPENDS
			| DETACH
			| DICTIONARY
			| DISABLE_P
			| DISCARD
			| DOCUMENT_P
			| DOMAIN_P
			| DOUBLE_P
			| DROP
			| EACH
			| ENABLE_P
			| ENCODING
			| ENCRYPTED
			| ENUM_P
			| ESCAPE
			| EVENT
			| EXCLUDE
			| EXCLUDING
			| EXCLUSIVE
			| EXECUTE
			| EXPLAIN
			| EXTENSION
			| EXTERNAL
			| FAMILY
			| FILTER
			| FIRST_P
			| FOLLOWING
			| FORCE
			| FORWARD
			| FUNCTION
			| FUNCTIONS
			| GENERATED
			| GLOBAL
			| GRANTED
			| GROUPS
			| HANDLER
			| HEADER_P
			| HOLD
			| HOUR_P
			| IDENTITY_P
			| IF_P
			| IMMEDIATE
			| IMMUTABLE
			| IMPLICIT_P
			| IMPORT_P
			| INCLUDE
			| INCLUDING
			| INCREMENT
			| INDEX
			| INDEXES
			| INHERIT
			| INHERITS
			| INLINE_P
			| INPUT_P
			| INSENSITIVE
			| INSERT
			| INSTEAD
			| INVOKER
			| ISOLATION
			| KEY
			| LABEL
			| LANGUAGE
			| LARGE_P
			| LAST_P
			| LEAKPROOF
			| LEVEL
			| LISTEN
			| LOAD
			| LOCAL
			| LOCATION
			| LOCK_P
			| LOCKED
			| LOGGED
			| MAPPING
			| MATCH
			| MATERIALIZED
			| MAXVALUE
			| METHOD
			| MINUTE_P
			| MINVALUE
			| MODE
			| MONTH_P
			| MOVE
			| NAME_P
			| NAMES
			| NEW
			| NEXT
			| NO
			| NOTHING
			| NOTIFY
			| NOWAIT
			| NULLS_P
			| OBJECT_P
			| OF
			| OFF
			| OIDS
			| OLD
			| OPERATOR
			| OPTION
			| OPTIONS
			| ORDINALITY
			| OTHERS
			| OVER
			| OVERRIDING
			| OWNED
			| OWNER
			| PARALLEL
			| PARSER
			| PARTIAL
			| PARTITION
			| PASSING
			| PASSWORD
			| PLANS
			| POLICY
			| PRECEDING
			| PREPARE
			| PREPARED
			| PRESERVE
			| PRIOR
			| PRIVILEGES
			| PROCEDURAL
			| PROCEDURE
			| PROCEDURES
			| PROGRAM
			| PUBLICATION
			| QUOTE
			| RANGE
			| READ
			| REASSIGN
			| RECHECK
			| RECURSIVE
			| REF
			| REFERENCING
			| REFRESH
			| REINDEX
			| RELATIVE_P
			| RELEASE
			| RENAME
			| REPEATABLE
			| REPLACE
			| REPLICA
			| RESET
			| RESTART
			| RESTRICT
			| RETURNS
			| REVOKE
			| ROLE
			| ROLLBACK
			| ROLLUP
			| ROUTINE
			| ROUTINES
			| ROWS
			| RULE
			| SAVEPOINT
			| SCHEMA
			| SCHEMAS
			| SCROLL
			| SEARCH
			| SECOND_P
			| SECURITY
			| SEQUENCE
			| SEQUENCES
			| SERIALIZABLE
			| SERVER
			| SESSION
			| SET
			| SETS
			| SHARE
			| SHOW
			| SIMPLE
			| SKIP
			| SNAPSHOT
			| SQL_P
			| STABLE
			| STANDALONE_P
			| START
			| STATEMENT
			| STATISTICS
			| STDIN
			| STDOUT
			| STORAGE
			| STRICT_P
			| STRIP_P
			| SUBSCRIPTION
			| SYSID
			| SYSTEM_P
			| TABLES
			| TABLESPACE
			| TEMP
			| TEMPLATE
			| TEMPORARY
			| TEXT_P
			| TIES
			| TRANSACTION
			| TRANSFORM
			| TRIGGER
			| TRUNCATE
			| TRUSTED
			| TYPE_P
			| TYPES_P
			| UNBOUNDED
			| UNCOMMITTED
			| UNENCRYPTED
			| UNKNOWN
			| UNLISTEN
			| UNLOGGED
			| UNTIL
			| UPDATE
			| VACUUM
			| VALID
			| VALIDATE
			| VALIDATOR
			| VALUE_P
			| VARYING
			| VERSION_P
			| VIEW
			| VIEWS
			| VOLATILE
			| WHITESPACE_P
			| WITHIN
			| WITHOUT
			| WORK
			| WRAPPER
			| WRITE
			| XML_P
			| YEAR_P
			| YES_P
			| ZONE

SelectStmt                  ::= simpleSelectClause
                            |   selectWithParens

simpleSelectClause          ::=  SELECT ALL? targetList?
                                FROM fromList whereClause?
                                groupClause? havingClause?
                            |   SELECT distinctClause targetList?
                                FROM fromList whereClause?
                                groupClause? havingClause?
                            |   select_clause UNION allOrDistinct? SelectStmt
                            |   select_clause INTERSECT allOrDistinct? SelectStmt
                            |   select_clause EXCEPT allOrDistinct? SelectStmt

selectWithParens            ::= '(' select_no_parens ')'
                            |   '(' selectWithParens ')'

selectNoParens              ::= simpleSelectClause
                            |   SelectStmt sortClause

sortClause                  ::= ORDER BY sortByElemList

sortByElemList              ::= sortByElem (',' sortByElem)*

sortByElem                  ::= colRef ascDesc?

colRef                      ::= intConst //>=0 номер столбца
                            |   ColId

ascDesc                     ::= ASC | DESC //ASC ON DEFAULT

targetList                  ::= targetEl (',' targetEl)*

targetEl                    ::= targetExpr AS IDENT
                            |   targetExpr IDENT
                            |   targetExpr
                            |   '*'

targetExpr                  ::= ColId                //если есть аггрегатные функции, то должен содержаться или в них или в GROUP BY
                            |   AVG   '(' ColId ')'
                            |   SUM   '(' ColId ')'
                            |   COUNT '(' ColId ')'
                            |   MIN   '(' ColId ')'
                            |   MAX   '(' ColId ')'

fromList                    ::= tableRef (',' tableRef)*

whereClause                 ::= WHERE boolExpr

groupClause                 ::= GROUP BY colRef (',' colRef)*

havingClause                ::= HAVING boolExpr

distinctClause              ::= DISTINCT (ON '(' colRefList ')')?

allOrDistinct               ::= ALL| DISTINCT

colRefList                  ::= colRef (',' colRef)*

tableRef                    ::= relationExpr aliasClause?
                            |   selectWithParens aliasClause?
                            |   joinedTable aliasClause?

relationExpr                ::= QualifiedName '*'?
                            |   ONLY QualifiedName
                            |   ONLY '(' QualifiedName ')'

aliasClause                 ::= AS ColId
                            |   ColId

joinedTable                 ::= '(' joinedTable ')'
                            |   tableRef CROSS JOIN tableRef
                            |   tableRef joinType JOIN tableRef joinQual
                            |   tableRef JOIN tableRef joinQual

joinType                    ::= FULL OUTER?
                            |   LEFT OUTER?
                            |   RIGHT OUTER?
                            |   INNER

joinQual                    ::= USING '(' ColId (',' ColId)* ')'
                            |   ON boolExpr


InsertStmt                  ::= INSERT INTO insertTarget insertRest

insertTarget                ::= QualifiedName (AS ColId)?

insertRest                  ::= SelectStmt
                            |   '(' insertColumnList ')' SelectStmt
                            |   DEFAULT VALUES

insertColumnList            ::= QualifiedName (',' QualifiedName)

UpdateStmt                  ::= UPDATE relationExprOptAlias SET setClauseList FROM fromList whereClause

setClauseList               ::= setClause (',' setClause)*


setClause                   ::= QualifiedName '=' Expr
                            |   QualifiedName '=' DEFAULT
                            |   QualifiedName '=' SelectStmt          //UNSUPPORTED SelectStmt должен возвращать 1 строку (try_catch)
                            |   '(' setTargetList ')' '=' Expr
                            |   '(' setTargetList ')' '=' DEFAULT
                            |   '(' setTargetList ')' '=' SelectStmt //UNSUPPORTED SelectStmt должен возвращать 1 строку

setTargetList              ::= QualifiedName (',' QualifiedName)*

DeleteStmt                  ::= DELETE FROM relationExprOptAlias whereClause

relationExprOptAlias        ::= relationExpr
                            |   relationExpr ColId
                            |   relationExpr AS ColId

CreateFunctionStmt          ::= (OR REPLACE)? FUNCTION QualifiedName funcArgsWithDefaults
                                RETURNS Typename createFuncOptList
                            |   (OR REPLACE)? FUNCTION QualifiedName funcArgsWithDefaults
                                RETURNS TABLE '(' TableFuncColumnList ')' createFuncOptList
                            |   (OR REPLACE)? FUNCTION QualifiedName '(' ')'
                                RETURNS TRIGGER createFuncOptList //В семантическом анализе, если имя NEW.smth валдировать это

CreateTriggerStmt           ::= TRIGGER QualifiedName trigTime trigAction (OR trigAction)* ON QualifiedName
                                FOR EACH ROW EXECUTE PROCEDURE QualifiedName '(' ')' ';'
                                
TableFuncColumnList         ::= TableFuncColumn (',' TableFuncColumn)*

TableFuncColumn             ::= IDENT Typename

trigTime                    ::= BEFORE
                            |   AFTER
                            |   INSTEAD OF

trigAction                  ::= INSERT
                            |   UPDATE
                            |   DELETE

funcArgsWithDefaults        ::= '(' funcArgsWithDefaultsList? ')'

funcArgsWithDefaultsList    ::= funcArgWithDefault (',' funcArgWithDefault)*

funcArgWithDefault          ::= funcArg
                            |   funcArg DEFAULT exprNoVar
                            |   funcArg '=' exprNoVar

funcArg                     ::= argClass IDENT Typename
                            |   IDENT argClass Typename
                            |   IDENT Typename
                            |   argClass Typename
                            |   Typename

argClass                    ::= IN
                            |   OUT
                            |   INOUT
                            |   IN OUT

createFuncOptList           ::= AS '$$' funcAs '$$' LANGUAGE plpgsql
                            |   LANGUAGE plpgsql AS '$$' funcAs '$$'

funcAs                      ::= declareBlock? BEGIN funcBody* END ';'

declareBlock                ::= DECLARE varDecl+

varDecl                     ::= QualifiedName Typename (':=' ConstExpr)? ';'

funcBody                    ::= funcAs
                            |   varAssign
                            |   returnStmt
                            |   ifStmt
                            |   loopStmt
                            |   NULL ';'
                            |   raiseStmt
                            |   InsertStmt ';'
                            |   UpdateStmt ';'
                            |   DeleteStmt ';'
                            |   SelectStmt ';'

varAssign                   ::= QualifiedName ':=' Expr ';'

raiseStmt                   ::= RAISE NOTICE CharacterValue ';'
                            |   RAISE EXCEPTION? CharacterValue ';'

returnStmt                  ::= RETURN Expr ';'
                            |   RETURN QUERY SelectStmt ';'

ifStmt                      ::= IF boolExpr THEN ifAs (ELSIF boolExpr THEN ifAs)? (ELSE ifAs)? END IF ';'

ifAs                        ::= declareBlock? BEGIN funcBody* END ';'
                            |   declareBlock? funcBody? ';'

loopStmt                    ::= (WHILE boolExpr)? LOOP cycleAs END LOOP ';'
                            |   FOR IDENT IN REVERSE? arithmExpr '..' arithmExpr (BY arithmExpr)? LOOP cycleAs END LOOP ';'
                            |   FOR QualifiedName IN SelectStmt cycleAs END LOOP ';'  //QualifiedName should be of type RECORD

cycleAs                     ::= declareBlock? BEGIN cycleBody* END ';'
                            |   declareBlock? cycleBody? ';'

cycleBody                   ::= funcBody
                            |   EXIT (WHEN boolExpr)? ';'
                            |   CONTINUE (WHEN boolExpr)? ';'

